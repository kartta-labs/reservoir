# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Django settings for reservoir project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from distutils.util import strtobool

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('RESERVOIR_SECRET_KEY', '5a-%%8)gkf#hq5&!#6(w+6xyra(!fx3lm4y3+jhrb=9)p@qh!o')

# SECURITY WARNING: don't run with debug turned on in production!
RESERVOIR_DEBUG = os.environ.get('RESERVOIR_DEBUG', False)
if isinstance(RESERVOIR_DEBUG, str):
    print('RESERVOIR_DEBUG was a string')
    RESERVOIR_DEBUG = bool(strtobool(RESERVOIR_DEBUG))

print('RESERVOIR_DEBUG: {}'.format(RESERVOIR_DEBUG))

DEBUG = RESERVOIR_DEBUG

ALLOWED_HOSTS = [os.environ.get('SERVER_NAME', '*'), 'reservoir']
print('ALLOWED_HOSTS: {}'.format(ALLOWED_HOSTS))

RESERVOIR_SITE_PREFIX = os.environ.get('RESERVOIR_SITE_PREFIX', '')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django_extensions',
    'compressor',
    'social_django', # TODO: Remove me
    'django_pgviews',
    'sequences.apps.SequencesConfig',
    'rest_framework',
    'rest_framework.authtoken',
    'mod_wsgi.server',
    'reservoir.api',
    'third_party.3dmr',
    'third_party.3dmr.mainapp',
]

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

# TODO: Remove social auth.
SOCIAL_AUTH_URL_NAMESPACE = 'social'
SOCIAL_AUTH_OPENSTREETMAP_KEY = 'VTwxvHwg0aeX6x30D1U9SK3JaQKcm8THrtJVsY9R'
SOCIAL_AUTH_OPENSTREETMAP_SECRET = '3QYDebgolnTGAWLn51nZUxynI0D0osmvUaBZsTYh'

AUTHENTICATION_BACKENDS = [
    'social_core.backends.openstreetmap.OpenStreetMapOAuth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'reservoir.middleware.OAuthProxyAuthenticationMiddleware',
]

if DEBUG:
    MIDDLEWARE.insert(0, 'reservoir.middleware.DevXEmailMiddleware')

ROOT_URLCONF = 'reservoir.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'reservoir.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('RESERVOIR_DB_NAME', 'reservoir'),
        'USER': os.environ.get('RESERVOIR_DB_USER', 'reservoir'),
        'PASSWORD': os.environ.get('RESERVOIR_DB_PASSWORD','reservoir'),
        'HOST': os.environ.get('RESERVOIR_DB_HOST','127.0.0.1'),
        'PORT': os.environ.get('RESERVOIR_DB_PORT','5432'),
    }
}

EDITOR_DB_HOST = os.environ.get('EDITOR_DB_HOST', '')
EDITOR_DB_PORT = os.environ.get('EDITOR_DB_PORT', '5432')
EDITOR_DB_NAME = os.environ.get('EDITOR_DB_NAME', '')
EDITOR_DB_USER = os.environ.get('EDITOR_DB_USER', '')
EDITOR_DB_PASSWORD = os.environ.get('EDITOR_DB_PASSWORD', '')

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = os.environ.get('RESERVOIR_STATIC_URL', '/static/')

STATIC_ROOT = os.environ.get('RESERVOIR_STATIC_ROOT', '/var/www/reservoir')

STATICFILES_DIRS = [
    './reservoir/third_party/3dmr/mainapp/static/',
]

STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        'compressor.finders.CompressorFinder',
)

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[RESERVOIR {levelname} {asctime} {filename}:{lineno}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.environ.get('RESERVOIR_LOG_LEVEL', 'DEBUG'),
    }
}
